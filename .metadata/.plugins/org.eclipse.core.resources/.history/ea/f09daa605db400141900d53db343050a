package FXLogic;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;

import mailFX.Controller.FXGUIController;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TablePosition;
import javafx.scene.control.TableView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCodeCombination;
import javafx.scene.input.KeyCombination;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;

public class FXKeyListener {
	public FXKeyListener(){
		
	}
	
	public FXKeyListener(TableView t, FXGUIController fc){
		addGroupListener(t, fc);
	}
	
	public void addGroupListener(final TableView table, final FXGUIController fc){
			table.setOnMouseClicked(new EventHandler<MouseEvent>(){

				@Override
				public void handle(MouseEvent arg0) {
					fc.checkForMinRecords();
				}
				
			});
			table.setOnKeyPressed(new EventHandler<KeyEvent>(){
    		final KeyCombination paste = new KeyCodeCombination(KeyCode.V, KeyCombination.CONTROL_ANY);
    		final KeyCombination copy = new KeyCodeCombination(KeyCode.C, KeyCombination.CONTROL_ANY);
    		final KeyCombination reverseTab = new KeyCodeCombination(KeyCode.TAB, KeyCombination.SHIFT_ANY);
    		ObservableList<TablePosition> cells = table.getSelectionModel().getSelectedCells();
    		
    		TablePosition focusedCell = table.getFocusModel().getFocusedCell();
    	    public void handle(KeyEvent t) {
    	    	if (reverseTab.match(t) && t.isShiftDown()){
    	        	TablePosition firstCell = cells.get(0);
    	        	int row = firstCell.getRow();
    	        	TableColumn column = firstCell.getTableColumn();
    	        	
    	        	if (firstCell.getColumn() != 0){
    	        		table.getSelectionModel().selectLeftCell();
	    	        	if(table.getSelectionModel().isSelected(row, column)){
	    	        		table.getSelectionModel().clearSelection(row, column);
	    	        	}
    	        	}
    	        	t.consume(); //do nothing
    	        }
    	    	else if (t.getCode() == KeyCode.TAB ) {
                    TablePosition firstCell = cells.get(0);
                    int row = firstCell.getRow();
                    TableColumn column = firstCell.getTableColumn();

                    if (table.getColumns().size()-1 != firstCell.getColumn()){
                            table.getSelectionModel().selectRightCell();
                            if(table.getSelectionModel().isSelected(row, column)){
                                    table.getSelectionModel().clearSelection(row, column);
                            }
                    }
                    t.consume(); // do nothing
    	        }
    	    	if (cells.size() == 0){
        			cells.set(0, table.getFocusModel().getFocusedCell());
        		}
    	    	//delete check
    	    	//System.out.println("Row: " + cells.get(0).getRow() + "Column: " + cells.get(0).getColumn());
    	        if (t.getCode() == KeyCode.DELETE ) {
    	        	//delete selected cells
    	        	for(TablePosition cell: cells){
    	        		TableColumn thisColumn = (TableColumn) table.getColumns().get(cell.getColumn());
    	        		Record record = (Record) table.getItems().get(cell.getRow());
    	        		table.getItems().set(cell.getRow(), ((Record) table.getItems().get(cell.getRow())).eraseCellFromRecord(cell.getColumn()));
    	        	}
    	     	}
    	        if (copy.match(t)){
    	        	if (cells.size() ==1){
	    	        	TablePosition cell = cells.get(0);
	    	        	TableColumn thisColumn = (TableColumn) table.getColumns().get(cell.getColumn());
	    	        	int column = table.getColumns().indexOf(thisColumn);
	        			Record record = (Record) table.getSelectionModel().getSelectedItem();
	        			String copyText = record.returnStringFromIndex(column);
	        			StringSelection selection = new StringSelection(copyText);
	        			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
	        			clipboard.setContents(selection, selection);
    	        	}
    	        	else {
    	        		String totalString = "";
    	        		for (TablePosition cell: cells){
    	    	        	TableColumn thisColumn = (TableColumn) table.getColumns().get(cell.getColumn());
    	    	        	int column = table.getColumns().indexOf(thisColumn);
    	        			Record record = (Record) table.getSelectionModel().getSelectedItem();
    	        			String copyText = record.returnStringFromIndex(column);
    	        			if (cell != cells.get(0)){
    	        				totalString += "\t";
    	        			}
    	        			totalString += copyText;
    	        		}
    	        		StringSelection selection = new StringSelection(totalString);
	        			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
	        			clipboard.setContents(selection, selection);
    	        	}
    	        }
	        	//paste check
    	        if (paste.match(t) ) {
    	        	//copy from clipboard in to a new record(s)
    	        	System.out.println(getStringFromClipboard());
    	        	if(!getStringFromClipboard().isEmpty() && getStringFromClipboard().contains("\t")){
    	        		fc.addRecordsFromExcelString(getStringFromClipboard(), table);
    	        	}
    	        	else {
    	        		for(TablePosition cell: cells){
	    	        		Record r = (Record) table.getSelectionModel().getSelectedItem();
	    	        		table.getItems().set(cell.getRow(), (Record) r.editCellWithString(cell.getColumn(), getStringFromClipboard()));
    	        		}
    	        	}
    	     	}
    	        else if(!(t.getCode() == KeyCode.TAB) && !t.isControlDown() && !t.isShiftDown()) {
    	        	for(TablePosition cell: cells){
    	        		ObservableList<Record> record = table.getItems();
    	        		table.edit(cell.getRow(), (TableColumn) table.getColumns().get(cell.getColumn()));
    	        	}
    	        }
    	        fc.checkForMinRecords();
	        }
    	});
	}
	
    public String getStringFromClipboard(){
    	Toolkit toolkit = Toolkit.getDefaultToolkit();
		Clipboard clipboard = toolkit.getSystemClipboard();
		String result = null;
		try {
			result = (String) clipboard.getData(DataFlavor.stringFlavor);
		} catch (UnsupportedFlavorException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;
    }
}
