package FXLogic;

import java.util.ArrayList;
import java.util.List;

import mailFX.Controller.FXGUIController;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.control.Cell;
import javafx.scene.control.ContentDisplay;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TextField;
import javafx.scene.control.Tooltip;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;


public class EditingCell extends TableCell<Record, String> {
    private TextField textField;
    private final Button deleteButton = new Button("x");
    
    public EditingCell() {
    	//Style delete button
    	deleteButton.getStyleClass().add("deleteButton");
    	deleteButton.setTooltip(new Tooltip("Click this button to delete this record"));
    	deleteButton.setStyle("-fx-background-color:rgb(236,108,118);");
    	//Action when the delete button is pressed
        deleteButton.setOnAction(new EventHandler<ActionEvent>(){

            @Override
            public void handle(ActionEvent t) {
                // get Selected Item
            	Record current = (Record) EditingCell.this.getTableView().getItems().get(EditingCell.this.getIndex());
            	//remove selected item from the table list
            	FXGUIController tempController = new FXGUIController();
            	Record empty = tempController.generateEmptyRecord(EditingCell.this.getIndex());
            	getTableView().getItems().set(getTableView().getItems().indexOf(current), empty);
            }
        });
        this.focusedProperty().addListener(getDeleteButtonListener());
        this.hoverProperty().addListener(getDeleteButtonListener());
    	
    }
    
    @Override
    public void startEdit() {
        super.startEdit();
        if (textField == null) {
            createTextField();
        }
        setGraphic(textField);
        setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                textField.requestFocus();
                textField.selectAll();
            }
        });
        if (isEditing() && getTableView().getColumns().indexOf(getTableColumn()) == 0){
    		System.out.println("here");
    		setGraphic(deleteButton);
    	}
    }
    @Override
    public void cancelEdit() {
        super.cancelEdit();
        setText((String) getItem());
        setContentDisplay(ContentDisplay.TEXT_ONLY);
        
    }
    @Override
    public void updateItem(String item, boolean empty) {
        super.updateItem(item, empty);
        if (empty) {
            if(textField != null){
                textField.setText(getString());
                setContentDisplay(ContentDisplay.TEXT_ONLY);
            }else {
               // setText(null);
               // setGraphic(null);
            }
        } else {
            if (isEditing()) {
                if (textField != null) {
                    textField.setText(getString());
                }
                setGraphic(textField);
                setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
            } else {
                setText(getString());
                setContentDisplay(ContentDisplay.TEXT_ONLY);
            }
        }
    }
    private void createTextField() {
        textField = new TextField(getString());
        textField.setMinWidth(this.getWidth() - this.getGraphicTextGap() * 2);
        textField.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent t) {
                if (t.getCode() == KeyCode.ENTER) {
                    commitEdit(textField.getText());
                } else if (t.getCode() == KeyCode.ESCAPE) {
                    cancelEdit();
                } else if (t.getCode() == KeyCode.TAB) {
                    commitEdit(textField.getText());
                    TableColumn nextColumn = getNextColumn(!t.isShiftDown());
                    if (nextColumn != null) {
                        getTableView().edit(getTableRow().getIndex(), nextColumn);
                    }
                }
            }
        });
        textField.focusedProperty().addListener(new ChangeListener<Boolean>() {
            @Override
            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
                if (!newValue && textField != null) {
                    commitEdit(textField.getText());
                }
            }
        });
    }
    private String getString() {
        return getItem() == null ? "" : getItem().toString();
    }
    /**
     *
     * @param forward true gets the column to the right, false the column to the left of the current column
     * @return
     */
    private TableColumn<Record, ?> getNextColumn(boolean forward) {
        List<TableColumn<Record, ?>> columns = new ArrayList<>();
        for (TableColumn<Record, ?> column : getTableView().getColumns()) {
            columns.addAll(getLeaves(column));
        }
        //There is no other column that supports editing.
        if (columns.size() < 2) {
            return null;
        }
        int currentIndex = columns.indexOf(getTableColumn());
        int nextIndex = currentIndex;
        if (forward) {
            nextIndex++;
            if (nextIndex > columns.size() - 1) {
                nextIndex = 0;
            }
        } else {
            nextIndex--;
            if (nextIndex < 0) {
                nextIndex = columns.size() - 1;
            }
        }
        return columns.get(nextIndex);
    }
     
    private List<TableColumn<Record, ?>> getLeaves(TableColumn<Record, ?> root) {
        List<TableColumn<Record, ?>> columns = new ArrayList<>();
        if (root.getColumns().isEmpty()) {
            //We only want the leaves that are editable.
            if (root.isEditable()) {
                columns.add(root);
            }
            return columns;
        } else {
            for (TableColumn<Record, ?> column : root.getColumns()) {
                columns.addAll(getLeaves(column));
            }
            return columns;
        }
    }
    
    public ChangeListener getDeleteButtonListener(){
    	return new ChangeListener<Boolean>(){

			@Override
			public void changed(ObservableValue<? extends Boolean> arg0,
					Boolean arg1, Boolean arg2) {
				if(arg1){
					deleteButton.toBack();
					deleteButton.setVisible(false);
					setContentDisplay(ContentDisplay.TEXT_ONLY);
				}
				if(!arg1){
					if(getTableView().getColumns().indexOf(getTableColumn()) == 0){
						deleteButton.setMaxHeight(Cell.USE_PREF_SIZE);
						setGraphic(deleteButton);
						deleteButton.setVisible(true);
						deleteButton.toFront();
						
						setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
					}
				}
			}
        	
        };
    }
}
