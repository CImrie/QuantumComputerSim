package core;
/**The Register class represents a quantum register that contains 'n' qubits 
 * @author Connor Imrie
 * 
 * The register is stored as an array of states. 
 * These quantum states are a superposition of qubits and handle their own behaviour 
 * relating to normalisation etc.
 * 
 * To get a meaningful result out of the register, 
 * each element must be taken by the tensor product of the element to its 'right' 
 * in the array (i.e. counting down the array)
 **/
public class Register {
	State[] states;
	
	public Register(int n){
		this.states = new State[n];
	}
	
	public Matrix getMatrix(){
		//go through each state in the array and take the tensor product with the element to its right:
		int length = this.states.length;
		//start with the last two elements:
		System.out.println(length);
		this.states[length-2].getMatrix().toString();
		Matrix currentTensorMatrix = this.states[length-2].tensorProduct(this.states[length-1].getMatrix());
		//Then loop through the remaining elements and take the tensor product with a matrix
		if (this.states.length > 2){
			for (int i = this.states.length-3; i > 0 ; i--){
				currentTensorMatrix = this.states[i].tensorProduct(currentTensorMatrix);
			}
		}
		return currentTensorMatrix;
	}
	
	public State getState(int index){
		return this.states[index];
	}
	
	public void setState(State s, int index){
		this.states[index] = s;
	}
}
